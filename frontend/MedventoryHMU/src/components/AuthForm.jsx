import { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import "./AuthForm.css";

export default function AuthForm() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const navigate = useNavigate();
  
  const passwordTimeoutRef = useRef(null);
  const confirmPasswordTimeoutRef = useRef(null);

  // Danh s√°ch ph√≤ng ban ƒë·∫ßy ƒë·ªß t·ª´ HMU
  const departments = [
    "Khoa x√©t nghi·ªám",
    "Khoa ph·ª•c h·ªìi ch·ª©c nƒÉng",
    "Khoa g√¢y m√™ h·ªìi s·ª©c v√† ch·ªëng ƒëau",
    "Khoa c·∫•p c·ª©u",
    "Khoa m·∫Øt",
    "Khoa ngo·∫°i tim m·∫°ch v√† l·ªìng ng·ª±c",
    "Khoa ngo·∫°i ti·∫øt ni·ªáu",
    "Khoa d∆∞·ª£c",
    "Khoa h·ªìi s·ª©c t√≠ch c·ª±c",
    "Khoa kh√°m ch·ªØa b·ªánh theo y√™u c·∫ßu",
    "Khoa gi·∫£i ph·∫´u b·ªánh",
    "Khoa n·ªôi th·∫ßn kinh",
    "Khoa vi sinh - k√Ω sinh tr√πng",
    "Khoa n·ªôi t·ªïng h·ª£p",
    "Khoa dinh d∆∞·ª°ng v√† ti·∫øt ch·∫ø",
    "Khoa ph·∫´u thu·∫≠t t·∫°o h√¨nh th·∫©m m·ªπ",
    "Khoa h√¥ h·∫•p",
    "Khoa ki·ªÉm so√°t nhi·ªÖm khu·∫©n",
    "Khoa thƒÉm d√≤ ch·ª©c nƒÉng",
    "Khoa ph·ª• s·∫£n",
    "Khoa nam h·ªçc v√† y h·ªçc gi·ªõi t√≠nh",
    "Khoa ngo·∫°i t·ªïng h·ª£p",
    "Khoa nhi",
    "Khoa ngo·∫°i th·∫ßn kinh - c·ªôt s·ªëng",
    "Khoa d·ªã ·ª©ng - mi·ªÖn d·ªãch l√¢m s√†ng",
    "Khoa n·ªôi ti·∫øt",
    "Khoa huy·∫øt h·ªçc v√† truy·ªÅn m√°u",
    "Khoa y h·ªçc c·ªï truy·ªÅn",
    "Khoa rƒÉng h√†m m·∫∑t",
    "Khoa ch·∫•n th∆∞∆°ng ch·ªânh h√¨nh v√† y h·ªçc th·ªÉ thao",
    "Khoa kh√°m b·ªánh",
    "Khoa n·ªôi th·∫≠n - ti·∫øt ni·ªáu",
    "Khoa b·ªánh nhi·ªát ƒë·ªõi v√† can thi·ªáp gi·∫£m h·∫°i"
  ];

  // Clear timeout khi component unmount
  useEffect(() => {
    return () => {
      if (passwordTimeoutRef.current) {
        clearTimeout(passwordTimeoutRef.current);
      }
      if (confirmPasswordTimeoutRef.current) {
        clearTimeout(confirmPasswordTimeoutRef.current);
      }
    };
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();

    // Ki·ªÉm tra email h·ª£p l·ªá cho c·∫£ ƒëƒÉng nh·∫≠p v√† ƒëƒÉng k√Ω (tr·ª´ admin)
    if (!email.endsWith("@gmail.com") && email !== "admin") {
      toast.error("Vui l√≤ng d√πng email @gmail.com ƒë·ªÉ ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω!");
      return;
    }

    // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u khi ƒëƒÉng k√Ω
    if (!isLogin && password !== confirmPassword) {
      toast.error("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      return;
    }

    // Cho ph√©p admin ƒëƒÉng nh·∫≠p kh√¥ng c·∫ßn email th·∫≠t
    if (isLogin) {
      if (email === "admin" && password === "12345") {
        toast.success("Xin ch√†o Admin üëë");
        setTimeout(() => navigate("/admin"), 800);
        return;
      }

      toast.success("Ch√†o m·ª´ng ƒë·∫øn Medventory-HMU üëã");
      setTimeout(() => navigate("/dashboard"), 800);
    } else {
      toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
      setIsLogin(true);
      setEmail("");
      setPassword("");
      setConfirmPassword("");
    }
  };

  const togglePasswordVisibility = () => {
    // Clear existing timeout
    if (passwordTimeoutRef.current) {
      clearTimeout(passwordTimeoutRef.current);
    }

    const newShowPassword = !showPassword;
    setShowPassword(newShowPassword);

    // N·∫øu ƒëang b·∫≠t hi·ªán m·∫≠t kh·∫©u, set timeout ƒë·ªÉ t·∫Øt sau 3 gi√¢y
    if (newShowPassword) {
      passwordTimeoutRef.current = setTimeout(() => {
        setShowPassword(false);
      }, 3000);
    }
  };

  const toggleConfirmPasswordVisibility = () => {
    // Clear existing timeout
    if (confirmPasswordTimeoutRef.current) {
      clearTimeout(confirmPasswordTimeoutRef.current);
    }

    const newShowConfirmPassword = !showConfirmPassword;
    setShowConfirmPassword(newShowConfirmPassword);

    // N·∫øu ƒëang b·∫≠t hi·ªán m·∫≠t kh·∫©u, set timeout ƒë·ªÉ t·∫Øt sau 3 gi√¢y
    if (newShowConfirmPassword) {
      confirmPasswordTimeoutRef.current = setTimeout(() => {
        setShowConfirmPassword(false);
      }, 3000);
    }
  };

  return (
    <div className="auth-page">
      <div className="demo-badge">Medventory-HMU</div>

      <div className="auth-wrapper">
        <div className="auth-header">
          <div className="logo-circle">
            <img src="/logo.jpg" alt="HMU Logo" className="logo-img" />
          </div>
          <h1>HMU Medical</h1>
          <p>H·ªá th·ªëng qu·∫£n l√Ω v·∫≠t t∆∞ y t·∫ø</p>
          <p className="sub">B·ªánh vi·ªán ƒê·∫°i h·ªçc Y H√† N·ªôi</p>
        </div>

        <div className="form-container">
          <div className="tabs">
            <button
              className={isLogin ? "tab active" : "tab"}
              onClick={() => setIsLogin(true)}
            >
              ƒêƒÉng nh·∫≠p
            </button>
            <button
              className={!isLogin ? "tab active" : "tab"}
              onClick={() => setIsLogin(false)}
            >
              ƒêƒÉng k√Ω
            </button>
          </div>

          <form onSubmit={handleSubmit} className="auth-form">
            {!isLogin && (
              <>
                <input type="text" placeholder="H·ªç v√† t√™n" required />

                <div className="grid-2">
                  <input type="date" placeholder="Ng√†y sinh" required />
                  <select required className="department-select">
                    <option value="">Ph√≤ng ban</option>
                    {departments.map((dept, index) => (
                      <option key={index} value={dept} title={dept}>
                        {dept.length > 30 ? dept.substring(0, 30) + "..." : dept}
                      </option>
                    ))}
                  </select>
                </div>
              </>
            )}

            {/*N·∫øu l√† admin th√¨ cho ph√©p nh·∫≠p text th∆∞·ªùng, c√≤n ng∆∞·ªùi kh√°c th√¨ d√πng email */}
            <input
              type={email === "admin" ? "text" : "email"}
              placeholder={
                email === "admin" ? "T√†i kho·∫£n admin" : "Email @gmail.com"
              }
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />

            <div className="password-input-wrapper">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="M·∫≠t kh·∫©u"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <span 
                className={`password-toggle ${showPassword ? 'visible' : ''}`}
                onClick={togglePasswordVisibility}
              >
                {showPassword ? "üîì" : "üîí"}
              </span>
              {showPassword && (
                <div className="password-timer">
                  <div className="timer-bar"></div>
                </div>
              )}
            </div>

            {!isLogin && (
              <>
                <div className="password-input-wrapper">
                  <input
                    type={showConfirmPassword ? "text" : "password"}
                    placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    required
                  />
                  <span 
                    className={`password-toggle ${showConfirmPassword ? 'visible' : ''}`}
                    onClick={toggleConfirmPasswordVisibility}
                  >
                    {showConfirmPassword ? "üîì" : "üîí"}
                  </span>
                  {showConfirmPassword && (
                    <div className="password-timer">
                      <div className="timer-bar"></div>
                    </div>
                  )}
                </div>
                
                <select required>
                  <option value="">Ph√¢n quy·ªÅn</option>
                  <option>L√£nh ƒë·∫°o</option>
                  <option>Th·ªß kho</option>
                  <option>C√°n b·ªô kh√°c</option>
                </select>
              </>
            )}

            {isLogin && (
              <div className="remember-row">
                <label>
                  <input type="checkbox" /> Ghi nh·ªõ ƒëƒÉng nh·∫≠p
                </label>
                <a href="#" onClick={() => navigate("/forgot")}>
                  Qu√™n m·∫≠t kh·∫©u?
                </a>
              </div>
            )}

            <button type="submit" className="submit-btn">
              {isLogin ? "ƒêƒÉng nh·∫≠p" : "ƒêƒÉng k√Ω t√†i kho·∫£n"}
            </button>
          </form>

          <div className="footer">
            <small>Demo Version</small>
          </div>
        </div>
      </div>
    </div>
  );
}